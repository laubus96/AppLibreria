{"version":3,"sources":["../../src/models/User.js"],"names":["UserSchema","Schema","firstName","type","String","required","trim","lastName","userName","email","password","roles","ref","Types","ObjectId","versionKey","statics","encrypPassword","salt","bcript","genSalt","hash","comparePassword","receivePassword","compare"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAGPC,IAAAA,IAAI,EAAE;AAHC,GADe;AAM1BC,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,IAAI,EAAE;AAHA,GANgB;AAW1BE,EAAAA,QAAQ,EAAE;AACNL,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAINC,IAAAA,IAAI,EAAE;AAJA,GAXgB;AAiB1BG,EAAAA,KAAK,EAAE;AACHN,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,IAFP;AAIHC,IAAAA,IAAI,EAAE;AAJH,GAjBmB;AAuB1BI,EAAAA,QAAQ,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,IAAI,EAAE;AAHA,GAvBgB;AA4B1BK,EAAAA,KAAK,EAAE,CAAC;AACJC,IAAAA,GAAG,EAAE,MADD;AAEJT,IAAAA,IAAI,EAAEF,iBAAOY,KAAP,CAAaC;AAFf,GAAD;AA5BmB,CAAX,EAgChB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAhCgB,CAAnB;;AAkCAf,UAAU,CAACgB,OAAX,CAAmBC,cAAnB,GAAoC,MAAMP,QAAN,IAAmB;AACnD,QAAMQ,IAAI,GAAG,MAAMC,kBAAOC,OAAP,CAAe,EAAf,CAAnB,CADmD,CACZ;;AACvC,SAAO,MAAMD,kBAAOE,IAAP,CAAYX,QAAZ,EAAsBQ,IAAtB,CAAb,CAFmD,CAET;AAC7C,CAHD;;AAKAlB,UAAU,CAACgB,OAAX,CAAmBM,eAAnB,GAAqC,OAAMZ,QAAN,EAAgBa,eAAhB,KAAoC;AACrE,SAAO,MAAMJ,kBAAOK,OAAP,CAAed,QAAf,EAAyBa,eAAzB,CAAb;AACH,CAFD;;eAIe,qBAAM,MAAN,EAAcvB,UAAd,C","sourcesContent":["import { Schema, model } from \"mongoose\";\r\nimport bcript from \"bcryptjs\";\r\n\r\nconst UserSchema = new Schema({\r\n    firstName: {\r\n        type: String,\r\n        required: true,\r\n        trim: true,\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        required: true,\r\n        trim: true,\r\n    },\r\n    userName: {\r\n        type: String,\r\n        required: true,\r\n\r\n        trim: true,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n\r\n        trim: true,\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        trim: true,\r\n    },\r\n    roles: [{\r\n        ref: \"Role\",\r\n        type: Schema.Types.ObjectId,\r\n    }, ],\r\n}, { versionKey: false });\r\n\r\nUserSchema.statics.encrypPassword = async(password) => {\r\n    const salt = await bcript.genSalt(10); //aplica un algoritomo 10 veces\r\n    return await bcript.hash(password, salt); // genera el hash, la contra encriptada\r\n};\r\n\r\nUserSchema.statics.comparePassword = async(password, receivePassword) => {\r\n    return await bcript.compare(password, receivePassword);\r\n};\r\n\r\nexport default model(\"User\", UserSchema);"],"file":"User.js"}