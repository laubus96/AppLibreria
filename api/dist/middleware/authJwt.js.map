{"version":3,"sources":["../../src/middleware/authJwt.js"],"names":["verifyToken","req","res","next","token","headers","status","json","message","console","log","decoded","jwt","verify","config","SECRET","userId","id","user","User","findById","password","error","isAdmin","roles","Rol","find","_id","$in","i","length","name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACnD,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CAAd,CADmD,CAEnD;;AACA,MAAI,CAACD,KAAL,EAAY,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,MAAI;AACF,UAAMC,OAAO,GAAGC,sBAAIC,MAAJ,CAAWT,KAAX,EAAkBU,gBAAOC,MAAzB,CAAhB;;AACAd,IAAAA,GAAG,CAACe,MAAJ,GAAaL,OAAO,CAACM,EAArB;AACA,UAAMC,IAAI,GAAG,MAAMC,cAAKC,QAAL,CAAcnB,GAAG,CAACe,MAAlB,EAA0B;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAA1B,CAAnB;AAEA,QAAI,CAACH,IAAL,EAAW,OAAOhB,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACXL,IAAAA,IAAI;AACL,GAPD,CAOE,OAAOmB,KAAP,EAAc;AACd,WAAOpB,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;AACF,CAfM;;;;AAiBA,MAAMe,OAAO,GAAG,OAAOtB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC/C,QAAMe,IAAI,GAAG,MAAMC,cAAKC,QAAL,CAAcnB,GAAG,CAACe,MAAlB,CAAnB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,QAAMc,KAAK,GAAG,MAAMC,aAAIC,IAAJ,CAAS;AAAEC,IAAAA,GAAG,EAAE;AAAEC,MAAAA,GAAG,EAAEV,IAAI,CAACM;AAAZ;AAAP,GAAT,CAApB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIL,KAAK,CAACK,CAAD,CAAL,CAASE,IAAT,KAAkB,OAAtB,EAA+B;AAC7B5B,MAAAA,IAAI;AACJ;AACD;AACF;;AACD,SAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AACD,CAfM","sourcesContent":["import config from \"../config\";\r\nimport User from \"../models/User\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Rol from \"../models/Rol\";\r\n\r\nexport const verifyToken = async (req, res, next) => {\r\n  const token = req.headers[\"x-access-token\"];\r\n  //console.log(token);\r\n  if (!token) return res.status(403).json({ message: \"No hay token\" });\r\n  console.log(\"llego\");\r\n  try {\r\n    const decoded = jwt.verify(token, config.SECRET);\r\n    req.userId = decoded.id;\r\n    const user = await User.findById(req.userId, { password: 0 });\r\n\r\n    if (!user) return res.status(404).json({ message: \"No existe el usuario\" });\r\n    next();\r\n  } catch (error) {\r\n    return res.status(401).json({ message: \"No autorizado\" });\r\n  }\r\n};\r\n\r\nexport const isAdmin = async (req, res, next) => {\r\n  const user = await User.findById(req.userId);\r\n  console.log(\"user\");\r\n  console.log(user);\r\n  console.log(\"user\");\r\n\r\n  const roles = await Rol.find({ _id: { $in: user.roles } });\r\n\r\n  for (let i = 0; i < roles.length; i++) {\r\n    if (roles[i].name === \"Admin\") {\r\n      next();\r\n      return;\r\n    }\r\n  }\r\n  return res.status(403).json({ message: \"No tiene los permisos\" });\r\n};\r\n"],"file":"authJwt.js"}