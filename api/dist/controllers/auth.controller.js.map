{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["singUp","req","res","firstName","lastName","userName","email","password","roles","body","newUser","User","encrypPassword","newRol","Role","find","name","$in","map","role","_id","findOne","newUserSave","save","token","jwt","sign","id","config","SECRET","expiresIn","json","singIn","userExist","status","message","passwordExist","comparePassword","massage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA;AAAlD,MAA4DP,GAAG,CAACQ,IAAtE;AAEA,QAAMC,OAAO,GAAG,IAAIC,aAAJ,CAAS;AACvBR,IAAAA,SADuB;AAEvBC,IAAAA,QAFuB;AAGvBC,IAAAA,QAHuB;AAIvBC,IAAAA,KAJuB;AAKvBC,IAAAA,QAAQ,EAAE,MAAMI,cAAKC,cAAL,CAAoBL,QAApB;AALO,GAAT,CAAhB;;AAQA,MAAIC,KAAJ,EAAW;AACT,UAAMK,MAAM,GAAG,MAAMC,aAAKC,IAAL,CAAU;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,GAAG,EAAET;AAAP;AAAR,KAAV,CAArB;AACAE,IAAAA,OAAO,CAACF,KAAR,GAAgBK,MAAM,CAACK,GAAP,CAAYC,IAAD,IAAUA,IAAI,CAACC,GAA1B,CAAhB;AACD,GAHD,MAGO;AACL,UAAMD,IAAI,GAAG,MAAML,aAAKO,OAAL,CAAa;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAb,CAAnB;AACAN,IAAAA,OAAO,CAACF,KAAR,GAAgB,CAACW,IAAI,CAACC,GAAN,CAAhB;AACD;;AACD,QAAME,WAAW,GAAG,MAAMZ,OAAO,CAACa,IAAR,EAA1B;;AACA,QAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAAEC,IAAAA,EAAE,EAAEL,WAAW,CAACF;AAAlB,GAAT,EAAkCQ,gBAAOC,MAAzC,EAAiD;AAC7DC,IAAAA,SAAS,EAAE;AADkD,GAAjD,CAAd;;AAGA5B,EAAAA,GAAG,CAAC6B,IAAJ,CAAS;AAAEP,IAAAA;AAAF,GAAT;AACD,CAvBM;;;;AAyBA,MAAMQ,MAAM,GAAG,OAAO/B,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAM+B,SAAS,GAAG,MAAMtB,cAAKU,OAAL,CAAa;AAAEhB,IAAAA,QAAQ,EAAEJ,GAAG,CAACQ,IAAJ,CAASJ;AAArB,GAAb,CAAxB;;AAEA,MAAI,CAAC4B,SAAL,EAAgB;AACd,WAAO/B,GAAG,CAACgC,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,QAAMC,aAAa,GAAG,MAAMzB,cAAK0B,eAAL,CAC1BpC,GAAG,CAACQ,IAAJ,CAASF,QADiB,EAE1B0B,SAAS,CAAC1B,QAFgB,CAA5B;;AAKA,MAAI,CAAC6B,aAAL,EAAoB;AAClB,WAAOlC,GAAG,CAACgC,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,QAAMd,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAAEC,IAAAA,EAAE,EAAEM,SAAS,CAACb;AAAhB,GAAT,EAAgCQ,gBAAOC,MAAvC,EAA+C;AAC3DC,IAAAA,SAAS,EAAE;AADgD,GAA/C,CAAd;;AAIA,SAAO5B,GAAG,CAAC6B,IAAJ,CAAS;AAAEP,IAAAA;AAAF,GAAT,CAAP;AACD,CArBM","sourcesContent":["import User from \"../models/User\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport Role from \"../models/Rol\";\r\n\r\nexport const singUp = async (req, res) => {\r\n  const { firstName, lastName, userName, email, password, roles } = req.body;\r\n\r\n  const newUser = new User({\r\n    firstName,\r\n    lastName,\r\n    userName,\r\n    email,\r\n    password: await User.encrypPassword(password),\r\n  });\r\n\r\n  if (roles) {\r\n    const newRol = await Role.find({ name: { $in: roles } });\r\n    newUser.roles = newRol.map((role) => role._id);\r\n  } else {\r\n    const role = await Role.findOne({ name: \"User\" });\r\n    newUser.roles = [role._id];\r\n  }\r\n  const newUserSave = await newUser.save();\r\n  const token = jwt.sign({ id: newUserSave._id }, config.SECRET, {\r\n    expiresIn: 86400,\r\n  });\r\n  res.json({ token });\r\n};\r\n\r\nexport const singIn = async (req, res) => {\r\n  const userExist = await User.findOne({ userName: req.body.userName });\r\n\r\n  if (!userExist) {\r\n    return res.status(400).json({ message: \"El usuario no existe\" });\r\n  }\r\n\r\n  const passwordExist = await User.comparePassword(\r\n    req.body.password,\r\n    userExist.password\r\n  );\r\n\r\n  if (!passwordExist) {\r\n    return res.status(401).json({ massage: \"La contrase√±a no existe\" });\r\n  }\r\n\r\n  const token = jwt.sign({ id: userExist._id }, config.SECRET, {\r\n    expiresIn: 86400,\r\n  });\r\n\r\n  return res.json({ token });\r\n};\r\n"],"file":"auth.controller.js"}